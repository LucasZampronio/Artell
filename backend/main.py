from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from dotenv import load_dotenv
import logging
import asyncio

# Importar modelos e servi√ßos
from app.models.artwork_analysis import ArtworkAnalysisRequest, ArtworkAnalysisResponse
from app.services.groq_service import groq_service
from app.services.database_service import database_service
from app.core.config import settings

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="API para an√°lise de obras de arte usando IA (Groq)",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Eventos de startup e shutdown
@app.on_event("startup")
async def startup_event():
    """Evento executado na inicializa√ß√£o da aplica√ß√£o"""
    try:
        logger.info("üöÄ Iniciando aplica√ß√£o Artell com Groq...")
        
        # Conectar √† base de dados
        await database_service.connect()
        
        logger.info("‚úÖ Aplica√ß√£o iniciada com sucesso!")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
        raise e

@app.on_event("shutdown")
async def shutdown_event():
    """Evento executado no encerramento da aplica√ß√£o"""
    try:
        logger.info("üîÑ Encerrando aplica√ß√£o...")
        
        # Desconectar da base de dados
        await database_service.disconnect()
        
        logger.info("‚úÖ Aplica√ß√£o encerrada com sucesso!")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao encerrar aplica√ß√£o: {e}")

# Endpoints da API

@app.get("/")
async def root():
    """Endpoint raiz com informa√ß√µes da API"""
    return {
        "message": "Bem-vindo ao Artell API! üé®",
        "version": settings.APP_VERSION,
        "description": "API para an√°lise de obras de arte usando intelig√™ncia artificial (Groq)",
        "ai_provider": "Groq (Llama 4 Scout)",
        "docs": "/docs",
        "endpoints": {
            "analyze_by_name": "POST /analise-por-nome",
            "recent_analyses": "GET /analises-recentes",
            "stats": "GET /estatisticas"
        }
    }

@app.get("/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de da aplica√ß√£o"""
    return {
        "status": "healthy",
        "service": "Artell API",
        "version": settings.APP_VERSION,
        "ai_provider": "Groq",
        "database": "connected" if database_service.client else "disconnected"
    }

@app.post("/analise-por-nome", response_model=ArtworkAnalysisResponse)
async def analyze_artwork_by_name(request: ArtworkAnalysisRequest):
    """
    Analisa uma obra de arte pelo nome usando IA (Groq)
    
    Este endpoint implementa um sistema de cache inteligente:
    1. Primeiro verifica se a an√°lise j√° existe no MongoDB
    2. Se existir, retorna a an√°lise em cache
    3. Se n√£o existir, chama a API da Groq
    4. Salva a nova an√°lise no MongoDB para futuras consultas
    """
    try:
        artwork_name = request.artwork_name.strip()
        
        if not artwork_name:
            raise HTTPException(
                status_code=400,
                detail="Nome da obra de arte √© obrigat√≥rio"
            )
        
        logger.info(f"üîç Recebida requisi√ß√£o para analisar: {artwork_name}")
        
        # 1. Verificar se j√° existe an√°lise em cache
        cached_analysis = await database_service.get_analysis_by_name(artwork_name)
        
        if cached_analysis:
            logger.info(f"‚úÖ An√°lise encontrada em cache para: {artwork_name}")
            return cached_analysis
        
        # 2. Se n√£o existir, gerar nova an√°lise com Groq
        logger.info(f"ü§ñ Gerando nova an√°lise com Groq para: {artwork_name}")
        
        analysis_data = await groq_service.analyze_artwork(artwork_name)
        
        # 3. Salvar an√°lise na base de dados
        saved_analysis = await database_service.save_analysis(analysis_data)
        
        logger.info(f"üíæ An√°lise salva na base de dados: {artwork_name}")
        
        return saved_analysis
        
    except HTTPException:
        # Re-raise HTTP exceptions
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise da obra {request.artwork_name}: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno do servidor: {str(e)}"
        )

@app.get("/analises-recentes")
async def get_recent_analyses(limit: int = 10):
    """
    Obt√©m as an√°lises mais recentes
    
    Args:
        limit: N√∫mero m√°ximo de an√°lises a retornar (padr√£o: 10)
    """
    try:
        if limit < 1 or limit > 50:
            raise HTTPException(
                status_code=400,
                detail="Limit deve estar entre 1 e 50"
            )
        
        analyses = await database_service.get_recent_analyses(limit)
        
        return {
            "analyses": analyses,
            "total": len(analyses),
            "limit": limit
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar an√°lises recentes: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno do servidor: {str(e)}"
        )

@app.get("/estatisticas")
async def get_statistics():
    """Obt√©m estat√≠sticas das an√°lises realizadas"""
    try:
        stats = await database_service.get_analysis_stats()
        
        return {
            "message": "Estat√≠sticas das an√°lises",
            "data": stats
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar estat√≠sticas: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno do servidor: {str(e)}"
        )

# Executar aplica√ß√£o se chamado diretamente
if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )
