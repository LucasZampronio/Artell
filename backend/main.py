# /backend/main.py

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from dotenv import load_dotenv
import logging
import asyncio

# Importar modelos e servi√ßos
from app.models.artwork_analysis import ArtworkAnalysisRequest, ArtworkAnalysisResponse
from app.services.groq_service import groq_service
from app.services.database_service import database_service
from app.core.config import settings

# ‚ú® 1. IMPORTAR O ROUTER DE ANALYSES ‚ú®
from app.routers.analyses import router as analyses_router

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="API para an√°lise de obras de arte usando IA (Groq)",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚ú® 2. INCLUIR O ROUTER NA APLICA√á√ÉO ‚ú®
app.include_router(analyses_router, prefix="/analyses", tags=["Analyses"])


# Eventos de startup e shutdown
@app.on_event("startup")
async def startup_event():
    """Evento executado na inicializa√ß√£o da aplica√ß√£o"""
    try:
        logger.info("üöÄ Iniciando aplica√ß√£o Artell com Groq...")
        await database_service.connect()
        logger.info("‚úÖ Aplica√ß√£o iniciada com sucesso!")
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
        raise e

@app.on_event("shutdown")
async def shutdown_event():
    """Evento executado no encerramento da aplica√ß√£o"""
    try:
        logger.info("üîÑ Encerrando aplica√ß√£o...")
        await database_service.disconnect()
        logger.info("‚úÖ Aplica√ß√£o encerrada com sucesso!")
    except Exception as e:
        logger.error(f"‚ùå Erro ao encerrar aplica√ß√£o: {e}")

# Endpoints da API (do main.py)

@app.get("/", tags=["Root"])
async def root():
    """Endpoint raiz com informa√ß√µes da API"""
    return {
        "message": "Bem-vindo ao Artell API! üé®",
        "version": settings.APP_VERSION,
        "docs": "/docs",
    }

@app.get("/health", tags=["Health"])
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de da aplica√ß√£o"""
    return {
        "status": "healthy",
        "service": "Artell API",
        "database": "connected" if database_service.client else "disconnected"
    }

@app.post("/analise-por-nome", response_model=ArtworkAnalysisResponse, tags=["Analysis"])
async def analyze_artwork_by_name(request: ArtworkAnalysisRequest):
    """
    Analisa uma obra de arte pelo nome usando IA (Groq)
    """
    try:
        artwork_name = request.artwork_name.strip()
        if not artwork_name:
            raise HTTPException(status_code=400, detail="Nome da obra de arte √© obrigat√≥rio")
        
        logger.info(f"üîç Recebida requisi√ß√£o para analisar: {artwork_name}")
        
        cached_analysis = await database_service.get_analysis_by_name(artwork_name)
        if cached_analysis:
            logger.info(f"‚úÖ An√°lise encontrada em cache para: {artwork_name}")
            return cached_analysis
        
        logger.info(f"ü§ñ Gerando nova an√°lise com Groq para: {artwork_name}")
        analysis_data = await groq_service.analyze_artwork(artwork_name)
        
        saved_analysis = await database_service.save_analysis(analysis_data)
        logger.info(f"üíæ An√°lise salva na base de dados: {artwork_name}")
        
        return saved_analysis
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise da obra {request.artwork_name}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

# ... (Os endpoints /analises-recentes e /estatisticas podem ser removidos daqui, pois j√° existem em analyses.py)

# Executar aplica√ß√£o se chamado diretamente
if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )